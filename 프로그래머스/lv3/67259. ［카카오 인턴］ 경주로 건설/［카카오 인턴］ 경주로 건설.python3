from collections import deque

def solution(board): # 0-1 BFS
    minV = 1e9
    n = len(board)
    dir = [[1, 0], [0, 1], [-1, 0], [0, -1]] # 우, 하, 좌, 상
    
    q = deque()
    q.append((0, 0, 0, 0))
    q.append((0, 0, 0, 1))
    visited = [[[-1] * n for _ in range(n)] for _ in range(4)]
    while q:
        money, x, y, didx = q.popleft()
        if visited[didx][y][x] > 0 and visited[didx][y][x] <= money:
            continue
        else:
            visited[didx][y][x] = money
        if x == n-1 and y == n-1:
            minV = min(minV, money)
            continue

        for i in range(4):
            if didx == (i+2)%4:
                continue
            d = dir[i]
            tx, ty = x+d[0], y+d[1]
            
            if 0 <= tx < n and 0 <= ty < n and board[ty][tx] == 0:
                if didx == i:
                    q.appendleft((money+100, tx, ty, i))
                else:
                    q.append((money+600, tx, ty, i))  

    return minV