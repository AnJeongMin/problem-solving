def solution(key, lock):
    n, m = len(lock), len(key)
    
    key_pos = []
    for i in range(m):
        for j in range(m):
            if key[i][j] == 1:
                key_pos.append([j, i])
    lock_cnt = 0
    for l in lock:
        lock_cnt += l.count(0)
    
    for _ in range(5):
        for dx in range(-m, n):
            for dy in range(-m, n):
                temp_keys = move_pos(key_pos, dx, dy)
                if is_valid(temp_keys, lock, n, m, lock_cnt):
                    return True
        key_pos = rotate_pos(key_pos, m)
    return False

def is_valid(key_pos, lock, n, m, lock_cnt):
    cnt = 0
    for kx, ky in key_pos:
        if is_range(kx, ky, n) and lock[ky][kx] == 0:
            cnt += 1
        if is_range(kx, ky, n) and lock[ky][kx] == 1:
            return False
    
    if cnt == lock_cnt:
        return True
    else:
        return False
    
def is_range(kx, ky, n):
    return 0 <= kx < n and 0 <= ky < n

def rotate_pos(key_pos, m):
    res = []
    for x, y in key_pos:
        res.append([m-1-y, x])
    return res

def move_pos(key_pos, dx, dy):
    res = []
    for x, y in key_pos:
        res.append([x+dx, y+dy])
    return res
    